name: Deploy terraform project

on:
  push:
    branches:
      - main
    paths:
      - 'projects/**/**'

jobs:
  deploy:
    name: Deploy Terraform Project
    runs-on: arc-runners
    outputs:
      projects: ${{ steps.collect-artifacts.outputs.projects }}
    env:
      VAULT_ADDR: ${{ vars.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GCP_STORAGE: ${{ secrets.GCP_STORAGE }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: eingram-homelab/terraform
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@main
        with:
          terraform_version: 1.11.3

      - name: Create json cred file
        run: |
          echo ${{ secrets.GCP_STORAGE }} | base64 --decode > /tmp/cred.json

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            projects/**/**/*.tf

      - name: Generate backend configuration
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            cat > "$dir/backend.tf" <<EOF
          terraform {
            backend "gcs" {
              bucket      = "yc-srv1-tfstate"
              credentials = "/tmp/cred.json"
              prefix      = "terraform/state/$(echo "$dir" | cut -d'/' -f3)-$(basename "$dir")"
            }
          }
          EOF
            echo "Generated backend.tf for $dir"
          done

      - name: Check terraform fmt
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            echo "Running terraform fmt for $dir"
            cd "$dir"
            terraform fmt -check
          done

      - name: Run terraform init
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            echo "Running terraform init for $dir"
            cd "$dir"
            terraform init
          done

      - name: Run terraform validate
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            echo "Running terraform validate for $dir"
            cd "$dir"
            terraform validate
          done

      - name: Run terraform apply
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            echo "Running terraform apply for $dir"
            cd "$dir"
            terraform apply --auto-approve
          done

      - name: Collect artifacts
        id: collect-artifacts
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          declare -a projects
          x=0
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Collecting artifacts from $dir"
            dir=$(dirname "$file")
            name=$(basename $dir)
            type=$(echo "$dir" | cut -d'/' -f3)
            cd "$dir"
            ip_address=$(terraform output -json default_ip_address | jq -r '.[0]')
            # Create array from artifacts
            projects[x]=([name]="$name" [type]="$type" [ip_address]="$ip_address")
            ((x++))
          done
          echo $projects
          # Create json from array and output to GitHub Actions
          $(printf '%s\n' "${projects[@]}" | jq -R 'split(" ") | {name: .[0], type: .[1], ip_address: .[2]}') >> $GITHUB_OUTPUT

  # test:
  #   name: Run post build tests
  #   runs-on: arc-runners
  #   needs: deploy
  #   steps:
  #     - name: 