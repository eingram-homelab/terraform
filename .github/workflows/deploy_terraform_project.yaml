name: Deploy terraform project

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'projects/**/**'

jobs:
  deploy:
    name: Deploy Terraform Project
    runs-on: arc-runners
    outputs:
      project_name: ${{ steps.collect-artifacts.outputs.project_name }}
      project_type: ${{ steps.collect-artifacts.outputs.project_type }}
      ansible_limit: ${{ steps.collect-artifacts.outputs.ansible_limit }}
      ansible_user: ${{ steps.collect-artifacts.outputs.ansible_user }}
    env:
      VAULT_ADDR: ${{ vars.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GCP_STORAGE: ${{ secrets.GCP_STORAGE }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: eingram-homelab/terraform
          ref: develop

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            projects/**/**/*.tf

      - name: Ensure only one project is changed
        id: check-projects
        run: |
          if [ "${{ steps.changed-files.outputs.all_changed_files }}" != "" ]; then
            echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
            projects=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -oE '.+\/')
            echo ${projects[@]}
            unique_project=$(echo "$projects" | sort -u)
            echo $unique_project
            if [ $(echo "$unique_project" | wc -l) -gt 1 ]; then
              echo "Error: More than one project changed. Please limit changes to one project at a time."
              exit 1
            fi
            echo "project=$unique_project" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@main
        with:
          terraform_version: 1.11.3

      - name: Create json cred file
        run: |
          echo ${{ secrets.GCP_STORAGE }} | base64 --decode > /tmp/cred.json

      - name: Generate backend configuration
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          cat > "$dir/backend.tf" <<EOF
          terraform {
            backend "gcs" {
              bucket      = "yc-srv1-tfstate"
              credentials = "/tmp/cred.json"
              prefix      = "terraform/state/$(echo "$dir" | cut -d'/' -f3)-$(basename "$dir")"
            }
          }
          EOF
          echo "Generated backend.tf for $dir"

      - name: Check terraform fmt
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform fmt for $dir"
          cd "$dir"
          terraform fmt -check

      - name: Run terraform init
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform init for $dir"
          cd "$dir"
          terraform init

      - name: Run terraform validate
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform validate for $dir"
          cd "$dir"
          terraform validate

      - name: Run terraform apply
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform apply for $dir"
          cd "$dir"
          terraform apply --auto-approve

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Collect artifacts
        id: collect-artifacts
        continue-on-error: true
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Collecting artifacts from $dir"
          echo project_name=$(basename $dir) >> $GITHUB_OUTPUT
          if [ $project_name == *"linux"* ]; then
            echo ansible_user="ansible" >> $GITHUB_OUTPUT
          fi
          type=$(echo "$dir" | cut -d'/' -f2)
          echo "Project type: $type"
          echo project_type=$type >> $GITHUB_OUTPUT
          cd "$dir"
          if [ "$type" == "vsphere" ]; then
            # Initialize empty array
            declare -a name_list=()
            
            # Use -e to check if output exists
            if terraform output -json domain &>/dev/null; then
              domain=$(terraform output -json domain | jq -r '. // empty')
              if [ -z "$domain" ]; then
                echo "Warning: Domain output is empty or null"
                exit 1
              fi
              
              if terraform output -json name &>/dev/null; then
                names=$(terraform output -json name | jq -r '.')
                while IFS= read -r item; do
                  [ -n "$item" ] && name_list+=("$item")
                done < <(jq -c '.[]' <<< "$names")
                if [ ${#name_list[@]} -eq 0 ]; then
                  echo "Warning: No names found in output"
                  exit 1
                fi
                
                for i in "${!name_list[@]}"; do
                  name_list[$i]=$(echo "${name_list[$i]}" | tr -d '"')
                  name_list[$i]="${name_list[$i]}"."$domain"
                done
                
                ansible_hosts=$(IFS=,; echo "${name_list[*]}")
                echo "ansible_limit=$ansible_hosts" >> $GITHUB_OUTPUT
                echo "Generated hosts: $ansible_hosts"
              else
                echo "Error: 'name' output not found"
                exit 1
              fi
            else
              echo "Error: 'domain' output not found"
              exit 1
            fi
          fi

  call_post_deploy_vsphere_workflow:
    needs: deploy
    if: needs.deploy.outputs.project_type == 'vsphere'
    uses: eingram-homelab/ansible-col-homelab/.github/workflows/run_playbook.yaml@develop
    with:
      limit: ${{ needs.deploy.outputs.ansible_limit }}
      playbook: "new_build.yaml"
      extra_vars: "hostvar=all"
      ansible_user: ${{ needs.deploy.outputs.ansible_user }}
    secrets: inherit

  run_terraform_destroy:
    needs:
      - deploy
      - call_post_deploy_vsphere_workflow
    runs-on: arc-runners
    if: ${{ always() && ((needs.deploy.steps.collect-artifacts.outcome == 'failure') || (needs.call_post_deploy_vsphere_workflow.result == 'failure')) }}
    env:
      VAULT_ADDR: ${{ vars.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      GCP_STORAGE: ${{ secrets.GCP_STORAGE }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: eingram-homelab/terraform
          ref: develop

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: |
            projects/**/**/*.tf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@main
        with:
          terraform_version: 1.11.3

      - name: Create json cred file
        run: |
          echo ${{ secrets.GCP_STORAGE }} | base64 --decode > /tmp/cred.json

      - name: Ensure only one project is changed
        id: check-projects
        run: |
          if [ "${{ steps.changed-files.outputs.all_changed_files }}" != "" ]; then
            echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
            projects=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -oE '.+\/')
            echo ${projects[@]}
            unique_project=$(echo "$projects" | sort -u)
            echo $unique_project
            if [ $(echo "$unique_project" | wc -l) -gt 1 ]; then
              echo "Error: More than one project changed. Please limit changes to one project at a time."
              exit 1
            fi
            echo "project=$unique_project" >> $GITHUB_OUTPUT
          fi

      - name: Generate backend configuration
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          cat > "$dir/backend.tf" <<EOF
          terraform {
            backend "gcs" {
              bucket      = "yc-srv1-tfstate"
              credentials = "/tmp/cred.json"
              prefix      = "terraform/state/$(echo "$dir" | cut -d'/' -f3)-$(basename "$dir")"
            }
          }
          EOF
          echo "Generated backend.tf for $dir"

      - name: Run terraform init
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform init for $dir"
          cd "$dir"
          terraform init

      - name: Run terraform destroy
        run: |
          dir=${{ steps.check-projects.outputs.project }}
          echo "Running terraform destroy for $dir"
          cd "$dir"
          terraform destroy --auto-approve